#
#	DataStore which contains all the simulation data generated by the webapp.
#	@fileName: appData.js
#	@author: selvam1991@gmail.com
#	
#
socr.dataStore = (->
  
  # helper toolkit.
  # to be installed in all objects created using createObject()
  _helper = (type) ->
    _data = {}
    getData: (index) ->
      if typeof _data[index] isnt "undefined"
        _data[index]
      else
        _data

    setData: (data) ->
      
      #check whether data is clean
      if typeof data is "object"
        
        #appending the values to data
        # if certain key already exists, incoming data will overwrite it.
        unless $.isEmptyObject(_data)
          
          # $.each(data,function(key,value){
          # 	_data[key]=value;
          # });
          i = 0

          while i < data.length
            _data[i] = data[i]  if data[i] isnt `undefined` and data[i] isnt NaN
            i++
        else
          _data = data
        this
      else
        false

    order: (type) ->

  
  #type = ascending or descending
  createObject: (name, data, type) ->
    
    # "."delimited name 
    name_list = $.normalize(name)
    temp = this
    newFlag = false
    try
      i = 0

      while i < name_list.length
        unless temp.hasOwnProperty(name_list[i])
          Object.defineProperty temp, name_list[i],
            value: {}
            writable: true
            enumerable: true
            configurable: true

          
          # Set the new Object flag to true.
          newFlag = true
        temp = temp[name_list[i]]
        i++
      
      #check if data exists.
      if typeof data isnt "undefined"
        if newFlag
          h = _helper()
          
          # Installing the helper functions to the newly created object.
          $.extend temp, h
        
        # set the data provided with the function call.
        temp.setData data
      return this
    catch e
      console.log e.stack
      PubSub.publish "Error",
        description: "Error while creating dataStore object."

    return

  removeObject: (obj) ->
    delete this[obj]  if typeof this[obj] isnt "undefined"
    
    # delete all the data entries created by the app
    if obj is "all"
      for prop of this
        delete this[prop]  if prop isnt "createObject" and prop isnt "removeObject"
    this
)()